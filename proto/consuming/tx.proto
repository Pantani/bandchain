syntax = "proto3";
package tendermint.bandchain.consuming;

// this line is used by starport scaffolding # proto/tx/import
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "consuming/oracle.proto";

option go_package = "github.com/tendermint/bandchain/x/consuming/types";

// Msg defines the Msg service.
service Msg {
  // this line is used by starport scaffolding # proto/tx/rpc
  rpc SendSellOrder(MsgSendSellOrder) returns (MsgSendSellOrderResponse);
  rpc SendCreatePair(MsgSendCreatePair) returns (MsgSendCreatePairResponse);
  rpc OracleData(MsgOracleData) returns (MsgOracleDataResponse);
}

// this line is used by starport scaffolding # proto/tx/message
message MsgSendSellOrder {
  string sender = 1;
  string port = 2;
  string channelID = 3;
  uint64 timeoutTimestamp = 4;
  string amountDenom = 5;
  int32 amount = 6;
  string priceDenom = 7;
  int32 price = 8;
}

message MsgSendSellOrderResponse {
}

message MsgSendCreatePair {
  string sender = 1;
  string port = 2;
  string channelID = 3;
  uint64 timeoutTimestamp = 4;
  string sourceDenom = 5;
  string targetDenom = 6;
}

message MsgSendCreatePairResponse {
}


message MsgOracleData {
  string creator = 1;
  int64 oracle_script_id = 2 [
    (gogoproto.customname) = "OracleScriptID",
    (gogoproto.moretags) = "yaml:\"oracle_script_id\""
  ];
  string source_channel = 3;
  CallData calldata = 4;
  uint64 ask_count = 5;
  uint64 min_count = 6;
  repeated cosmos.base.v1beta1.Coin fee_limit = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string request_key = 8;
  uint64 prepare_gas = 9;
  uint64 execute_gas = 10;
}

message MsgOracleDataResponse {
}